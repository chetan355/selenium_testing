<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="5" total="13" passed="7" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2022-06-07T21:42:40 IST" name="Suite" finished-at="2022-06-07T21:42:40 IST" duration-ms="107">
    <groups>
      <group name="Smoke">
        <method signature="Test1.msg()[pri:0, instance:test.Test1@193f604a]" name="msg" class="test.Test1"/>
        <method signature="Test2.price()[pri:0, instance:test.Test2@6babf3bf]" name="price" class="test.Test2"/>
      </group> <!-- Smoke -->
    </groups>
    <test started-at="2022-06-07T21:42:40 IST" name="car" finished-at="2022-06-07T21:42:40 IST" duration-ms="12">
      <class name="test.Test2">
        <test-method is-config="true" signature="suiteTest()[pri:0, instance:test.Test2@6babf3bf]" started-at="2022-06-07T21:42:40 IST" name="suiteTest" finished-at="2022-06-07T21:42:40 IST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- suiteTest -->
        <test-method is-config="true" signature="suiteTest1()[pri:0, instance:test.Test2@6babf3bf]" started-at="2022-06-07T21:42:40 IST" name="suiteTest1" finished-at="2022-06-07T21:42:40 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- suiteTest1 -->
      </class> <!-- test.Test2 -->
    </test> <!-- car -->
    <test started-at="2022-06-07T21:42:40 IST" name="Test" finished-at="2022-06-07T21:42:40 IST" duration-ms="107">
      <class name="test.Test2">
        <test-method is-config="true" signature="preqreq()[pri:0, instance:test.Test2@6babf3bf]" started-at="2022-06-07T21:42:40 IST" name="preqreq" finished-at="2022-06-07T21:42:40 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preqreq -->
        <test-method signature="model(java.lang.String,java.lang.String)[pri:0, instance:test.Test2@6babf3bf]" started-at="2022-06-07T21:42:40 IST" name="model" data-provider="getData" finished-at="2022-06-07T21:42:40 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[user_1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[pass_1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- model -->
        <test-method signature="model(java.lang.String,java.lang.String)[pri:0, instance:test.Test2@6babf3bf]" started-at="2022-06-07T21:42:40 IST" name="model" data-provider="getData" finished-at="2022-06-07T21:42:40 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[user_2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[pass_2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- model -->
        <test-method signature="model(java.lang.String,java.lang.String)[pri:0, instance:test.Test2@6babf3bf]" started-at="2022-06-07T21:42:40 IST" name="model" data-provider="getData" finished-at="2022-06-07T21:42:40 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[user_3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[pass_3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- model -->
        <test-method signature="price()[pri:0, instance:test.Test2@6babf3bf]" started-at="2022-06-07T21:42:40 IST" name="price" finished-at="2022-06-07T21:42:40 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- price -->
      </class> <!-- test.Test2 -->
      <class name="test.Test1">
        <test-method is-config="true" signature="beforeclass()[pri:0, instance:test.Test1@193f604a]" started-at="2022-06-07T21:42:40 IST" name="beforeclass" finished-at="2022-06-07T21:42:40 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeclass -->
        <test-method is-config="true" signature="beforeeverymethod()[pri:0, instance:test.Test1@193f604a]" started-at="2022-06-07T21:42:40 IST" name="beforeeverymethod" finished-at="2022-06-07T21:42:40 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeeverymethod -->
        <test-method signature="credentials(java.lang.String,java.lang.String)[pri:0, instance:test.Test1@193f604a]" started-at="2022-06-07T21:42:40 IST" name="credentials" finished-at="2022-06-07T21:42:40 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chetan244]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[dvbrebrbs]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- credentials -->
        <test-method is-config="true" signature="beforeeverymethod()[pri:0, instance:test.Test1@193f604a]" started-at="2022-06-07T21:42:40 IST" name="beforeeverymethod" finished-at="2022-06-07T21:42:40 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeeverymethod -->
        <test-method signature="msg()[pri:0, instance:test.Test1@193f604a]" started-at="2022-06-07T21:42:40 IST" name="msg" finished-at="2022-06-07T21:42:40 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- msg -->
        <test-method is-config="true" signature="beforeeverymethod()[pri:0, instance:test.Test1@193f604a]" started-at="2022-06-07T21:42:40 IST" name="beforeeverymethod" finished-at="2022-06-07T21:42:40 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeeverymethod -->
        <test-method signature="parameterTesting(java.lang.String)[pri:0, instance:test.Test1@193f604a]" started-at="2022-06-07T21:42:40 IST" name="parameterTesting" finished-at="2022-06-07T21:42:40 IST" duration-ms="6" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[chetan.com]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at test.Test1.parameterTesting(Test1.java:37)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- parameterTesting -->
        <test-method is-config="true" signature="beforeeverymethod()[pri:0, instance:test.Test1@193f604a]" started-at="2022-06-07T21:42:40 IST" name="beforeeverymethod" finished-at="2022-06-07T21:42:40 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeeverymethod -->
        <test-method signature="abc()[pri:0, instance:test.Test1@193f604a]" started-at="2022-06-07T21:42:40 IST" name="abc" finished-at="2022-06-07T21:42:40 IST" depends-on-methods="test.Test1.msg" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- abc -->
        <test-method is-config="true" signature="atEnd()[pri:0, instance:test.Test1@193f604a]" started-at="2022-06-07T21:42:40 IST" name="atEnd" finished-at="2022-06-07T21:42:40 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atEnd -->
      </class> <!-- test.Test1 -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
